import { OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { ChainService } from '../chain/chain.service';
import { ConfigService } from '@nestjs/config';
import { DatabaseService } from '../database/database.service';
export declare class BorrowDiscoveryService implements OnModuleInit, OnModuleDestroy {
    private readonly chainService;
    private readonly configService;
    private readonly databaseService;
    private readonly logger;
    private activeLoans;
    private liquidationTimes;
    private tokenCache;
    private readonly LIQUIDATION_THRESHOLD;
    private readonly CRITICAL_THRESHOLD;
    private readonly HEALTH_FACTOR_THRESHOLD;
    private readonly MIN_WAIT_TIME;
    private readonly MAX_WAIT_TIME;
    private checkInterval;
    private heartbeatInterval;
    constructor(chainService: ChainService, configService: ConfigService, databaseService: DatabaseService);
    onModuleInit(): Promise<void>;
    private loadTokenCache;
    private getTokenInfo;
    private formatAmount;
    private loadActiveLoans;
    private startListening;
    private startHealthFactorChecker;
    private startHeartbeat;
    private formatDate;
    private printHeartbeat;
    private checkHealthFactor;
    private getUserAccountData;
    private calculateHealthFactor;
    private calculateWaitTime;
    private executeLiquidation;
    private recordLiquidationTime;
    onModuleDestroy(): Promise<void>;
}
