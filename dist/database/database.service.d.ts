export declare class DatabaseService {
    private readonly logger;
    private prisma;
    constructor();
    updateLoanHealthFactor(chainName: string, user: string, healthFactor: number, nextCheckTime: Date): Promise<{
        id: number;
        chainName: string;
        user: string;
        healthFactor: number;
        lastCheckTime: Date;
        nextCheckTime: Date;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        liquidationDiscoveredAt: Date | null;
        liquidationTxHash: string | null;
        liquidationTime: Date | null;
        liquidator: string | null;
        liquidationDelay: number | null;
    }>;
    markLiquidationDiscovered(chainName: string, user: string): Promise<{
        id: number;
        chainName: string;
        user: string;
        healthFactor: number;
        lastCheckTime: Date;
        nextCheckTime: Date;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        liquidationDiscoveredAt: Date | null;
        liquidationTxHash: string | null;
        liquidationTime: Date | null;
        liquidator: string | null;
        liquidationDelay: number | null;
    }>;
    recordLiquidation(chainName: string, user: string, liquidator: string, txHash: string): Promise<{
        id: number;
        chainName: string;
        user: string;
        healthFactor: number;
        lastCheckTime: Date;
        nextCheckTime: Date;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        liquidationDiscoveredAt: Date | null;
        liquidationTxHash: string | null;
        liquidationTime: Date | null;
        liquidator: string | null;
        liquidationDelay: number | null;
    }>;
    getActiveLoans(): Promise<{
        id: number;
        chainName: string;
        user: string;
        healthFactor: number;
        lastCheckTime: Date;
        nextCheckTime: Date;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        liquidationDiscoveredAt: Date | null;
        liquidationTxHash: string | null;
        liquidationTime: Date | null;
        liquidator: string | null;
        liquidationDelay: number | null;
    }[]>;
    deactivateLoan(chainName: string, user: string): Promise<{
        id: number;
        chainName: string;
        user: string;
        healthFactor: number;
        lastCheckTime: Date;
        nextCheckTime: Date;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        liquidationDiscoveredAt: Date | null;
        liquidationTxHash: string | null;
        liquidationTime: Date | null;
        liquidator: string | null;
        liquidationDelay: number | null;
    }>;
    getLoansToCheck(): Promise<{
        id: number;
        chainName: string;
        user: string;
        healthFactor: number;
        lastCheckTime: Date;
        nextCheckTime: Date;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        liquidationDiscoveredAt: Date | null;
        liquidationTxHash: string | null;
        liquidationTime: Date | null;
        liquidator: string | null;
        liquidationDelay: number | null;
    }[]>;
}
